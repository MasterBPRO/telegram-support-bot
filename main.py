import telebot
import logging
import os
from peewee import SqliteDatabase, Model, IntegerField, IntegrityError

admin_chat = -123456789  # –ê–π–¥–∏ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
bot = telebot.TeleBot('123456789:AAFYqsQoAo01LcIH7Kn-oUEm474_Zdkgy8')   # –í–∞—à —Ç–æ–∫–µ–Ω

logging.basicConfig(filename="support.log", level=logging.ERROR, format='[LINE:%(lineno)d] %(levelname)-8s [%(asctime)s]  %(message)s')
db = SqliteDatabase('db.sqlite3')


class Block(Model):
    user_id = IntegerField(unique=True)

    class Meta:
        database = db


class Message(Model):
    from_ = IntegerField()
    id = IntegerField(unique=True)

    class Meta:
        database = db


if not os.path.exists('db.sqlite3'):
    Message.create_table()
    Block.create_table()


class Filters:
    def is_user(message):
        return message.chat.id != admin_chat and message.chat.type == 'private'

    def is_admin(message):
        return message.chat.id == admin_chat

    def is_answer(message):
        return message.chat.id == admin_chat and message.reply_to_message is not None and message.reply_to_message.forward_date is not None

    def is_blocked(message):
        return Block.select().where(Block.user_id == message.chat.id).exists()

    def is_not_blocked(message):
        return not Block.select().where(Block.user_id == message.chat.id).exists()


@bot.message_handler(commands=['start'])
def send_start(message):
    print(message.chat.id)
    bot.send_message(message.chat.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–∏—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Ç–æ –ø–∏—à–∏—Ç–µ –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å üòä\n\nüë®üèª‚Äçüíª with ‚ô• by BPRO')


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å –±–æ—Ç–æ–º, —è –¥–æ—Å—Ç–∞–≤–ª—é –µ–≥–æ –º–æ–µ–º—É –≥–æ—Å–ø–æ–æ–¥–∏–Ω—É.\n\nüë®üèª‚Äçüíª with ‚ô• by BPRO")


@bot.message_handler(content_types=['text', 'audio', 'document', 'photo', 'sticker', 'video', 'voice', 'location', 'contact'], func=lambda msg:
                     Filters.is_user(msg) and Filters.is_not_blocked(msg))
def get_question(message):
    bot.send_message(message.chat.id, text='üòÉ –í–∞—Ç—Å–æ–Ω, —É –Ω–∞—Å —Ö–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏!\n\n–Ø —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–æ–µ–º—É –≥–æ—Å–ø–æ–¥–∏–Ω—É!\n\nüë®üèª‚Äçüíª with ‚ô• by BPRO')
    sent = bot.forward_message(admin_chat, message.chat.id, message.message_id)
    Message.create(from_=message.chat.id, id=sent.message_id).save()


@bot.message_handler(func=Filters.is_user)
def get_error_question(message):
    bot.send_message(message.chat.id, text='üòµ –£–ø—Å... –í–∞—Ç—Å–æ–Ω —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã!\n\n–°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–µ–Ω–µ–Ω–∏—è –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º!')


@bot.message_handler(commands=['block'], func=Filters.is_answer)
def block(message):
    user_id = Message.select().where(Message.id == message.reply_to_message.message_id).get().from_
    try:
        Block.create(user_id=user_id).save()
    except IntegrityError:
        pass

    bot.send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')


@bot.message_handler(commands=['unblock'], func=Filters.is_answer)
def unblock(message):
    user_id = Message.select().where(Message.id == message.reply_to_message.message_id).get().from_
    try:
        Block.select().where(user_id == user_id).get().delete_instance()
    except Block.DoesNotExist:
        pass

    bot.send_message(message.chat.id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')


@bot.message_handler(content_types=['text', 'photo'], func=Filters.is_answer)
def answer_question(message):
    to_user_id = Message.select().where(Message.id == message.reply_to_message.message_id).get().from_
    if message.photo is not None:
        bot.send_photo(to_user_id, message.photo[-1].file_id, message.caption)
    else:
        bot.send_message(to_user_id, message.text)
    bot.send_message(message.chat.id, text='üò∫ –£—Å–ø–µ—Ö!\n\nüì® –ì–æ–ª—É–±–∏ —Å –ø–∏—Å—å–º–∞–º–∏ —É–∂–µ –≤ –ø—É—Ç–∏, –±–ª–∏–∂–∞–π—â–∏–µ –¥–Ω–∏ –æ—Ç–≤–µ—Ç –¥–æ–π–¥—ë—Ç –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.', reply_to_message_id=message.message_id)


bot.infinity_polling(none_stop=True, timeout=60)
